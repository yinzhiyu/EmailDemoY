package com.android.application.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.email.table.Mail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MAIL".
*/
public class MailDao extends AbstractDao<Mail, Long> {

    public static final String TABLENAME = "MAIL";

    /**
     * Properties of entity Mail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MessageID = new Property(1, String.class, "messageID", false, "MESSAGE_ID");
        public final static Property From = new Property(2, String.class, "from", false, "FROM");
        public final static Property To = new Property(3, String.class, "to", false, "TO");
        public final static Property Cc = new Property(4, String.class, "cc", false, "CC");
        public final static Property Bcc = new Property(5, String.class, "bcc", false, "BCC");
        public final static Property Subject = new Property(6, String.class, "subject", false, "SUBJECT");
        public final static Property Sentdata = new Property(7, String.class, "sentdata", false, "SENTDATA");
        public final static Property Content = new Property(8, String.class, "content", false, "CONTENT");
        public final static Property Replysign = new Property(9, boolean.class, "replysign", false, "REPLYSIGN");
        public final static Property Html = new Property(10, boolean.class, "html", false, "HTML");
        public final static Property News = new Property(11, boolean.class, "news", false, "NEWS");
        public final static Property Charset = new Property(12, String.class, "charset", false, "CHARSET");
        public final static Property UsefulType = new Property(13, int.class, "usefulType", false, "USEFUL_TYPE");
    }


    public MailDao(DaoConfig config) {
        super(config);
    }
    
    public MailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MESSAGE_ID\" TEXT," + // 1: messageID
                "\"FROM\" TEXT," + // 2: from
                "\"TO\" TEXT," + // 3: to
                "\"CC\" TEXT," + // 4: cc
                "\"BCC\" TEXT," + // 5: bcc
                "\"SUBJECT\" TEXT," + // 6: subject
                "\"SENTDATA\" TEXT," + // 7: sentdata
                "\"CONTENT\" TEXT," + // 8: content
                "\"REPLYSIGN\" INTEGER NOT NULL ," + // 9: replysign
                "\"HTML\" INTEGER NOT NULL ," + // 10: html
                "\"NEWS\" INTEGER NOT NULL ," + // 11: news
                "\"CHARSET\" TEXT," + // 12: charset
                "\"USEFUL_TYPE\" INTEGER NOT NULL );"); // 13: usefulType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Mail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String messageID = entity.getMessageID();
        if (messageID != null) {
            stmt.bindString(2, messageID);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(3, from);
        }
 
        String to = entity.getTo();
        if (to != null) {
            stmt.bindString(4, to);
        }
 
        String cc = entity.getCc();
        if (cc != null) {
            stmt.bindString(5, cc);
        }
 
        String bcc = entity.getBcc();
        if (bcc != null) {
            stmt.bindString(6, bcc);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(7, subject);
        }
 
        String sentdata = entity.getSentdata();
        if (sentdata != null) {
            stmt.bindString(8, sentdata);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(9, content);
        }
        stmt.bindLong(10, entity.getReplysign() ? 1L: 0L);
        stmt.bindLong(11, entity.getHtml() ? 1L: 0L);
        stmt.bindLong(12, entity.getNews() ? 1L: 0L);
 
        String charset = entity.getCharset();
        if (charset != null) {
            stmt.bindString(13, charset);
        }
        stmt.bindLong(14, entity.getUsefulType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Mail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String messageID = entity.getMessageID();
        if (messageID != null) {
            stmt.bindString(2, messageID);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(3, from);
        }
 
        String to = entity.getTo();
        if (to != null) {
            stmt.bindString(4, to);
        }
 
        String cc = entity.getCc();
        if (cc != null) {
            stmt.bindString(5, cc);
        }
 
        String bcc = entity.getBcc();
        if (bcc != null) {
            stmt.bindString(6, bcc);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(7, subject);
        }
 
        String sentdata = entity.getSentdata();
        if (sentdata != null) {
            stmt.bindString(8, sentdata);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(9, content);
        }
        stmt.bindLong(10, entity.getReplysign() ? 1L: 0L);
        stmt.bindLong(11, entity.getHtml() ? 1L: 0L);
        stmt.bindLong(12, entity.getNews() ? 1L: 0L);
 
        String charset = entity.getCharset();
        if (charset != null) {
            stmt.bindString(13, charset);
        }
        stmt.bindLong(14, entity.getUsefulType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Mail readEntity(Cursor cursor, int offset) {
        Mail entity = new Mail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // messageID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // from
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // to
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bcc
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // subject
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sentdata
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // content
            cursor.getShort(offset + 9) != 0, // replysign
            cursor.getShort(offset + 10) != 0, // html
            cursor.getShort(offset + 11) != 0, // news
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // charset
            cursor.getInt(offset + 13) // usefulType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Mail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessageID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFrom(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBcc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSubject(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSentdata(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setContent(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setReplysign(cursor.getShort(offset + 9) != 0);
        entity.setHtml(cursor.getShort(offset + 10) != 0);
        entity.setNews(cursor.getShort(offset + 11) != 0);
        entity.setCharset(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUsefulType(cursor.getInt(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Mail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Mail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Mail entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
